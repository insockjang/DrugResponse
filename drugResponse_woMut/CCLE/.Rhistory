responseDataValidation[,1]
pData(responseDataValidation[,1])
length(pData(responseDataValidation[,1]))
responseDataTest_processed <- pData(responseDataValidation[,kk])
plot(predictiveModel_myPcr1$customPredict(featureDataTest_processed[,1:500]),responseDataTest_processed)
length(pred)
length(responseDataTest_processed)
responseDataTest_processed <- pData(responseDataValidation[,kk])
responseDataTest_processed
plot(predictiveModel_myPcr1$customPredict(featureDataTest_processed[,1:500]),responseDataTest_processed)
responseDataTest_processed <- pData(responseDataValidation[,kk])
plot(predictiveModel_myPcr1$customPredict(featureDataTest_processed[,1:500]),responseDataTest_processed)
length(responseDataTest_processed)
length(responseDataTest_processed)
length(responseDataTest_processed[[1]])
plot(predictiveModel_myPcr1$customPredict(featureDataTest_processed[,1:500]),responseDataTest_processed[[1]])
length(pData(responseDataValidation[,kk]))
length((responseDataValidation[,kk]))
source('/Volumes/ijang/COMPBIO/trunk/users/jang/predictiveModel_ccle/createCcleTrainValidationData.R')
cor(predictiveModel_myPcr1$customPredict(featureDataTest_processed[,1:500]),responseDataTest_processed[[1]])
(cor(predictiveModel_myPcr1$customPredict(featureDataTest_processed[,1:500]),responseDataTest_processed[[1]]))^2
responseDataValidation[,kk]
responseDataValidation[,kk][[1]]
names(responseDataValidation[,kk])
responseDataValidation[,kk][[1]]
responseDataTest_processed <- responseDataValidation[,kk][[1]]
length(responseDataTest_processed)
## scale this data
responseDataTest_processed <- pData(responseDataValidation[,kk])
responseDataTest_processed[[1]]
names(responseDataTest_processed[[1]])
colnames(responseDataTest_processed[[1]])
rownames(responseDataTest_processed[[1]])
responseDataTest_processed <- responseDataValidation[,kk][[1]]
featureDataTest_scaled <- scale(featureDataTest_processed)
responseDataTest_scaled <- scale(responseDataTest_processed)
pcrScaled <- CaretModel$new(modelType = "pcr")
pcrUnscaled <- CaretModel$new(modelType = "pcr")
pcrScaled$customTrain(featureDataTrain_scaled[,1:500], responseData_scaled, tuneGrid=expand.grid(.ncomp = seq(1,100,1)), trControl = myTrControl)
featureDataTrain_scaled <- scale(featureDataTrain_processed)
responseDataTrain_scaled <- scale(responseDataTrain_processed)
featureDataTest_scaled <- scale(featureDataTest_processed)
responseDataTest_scaled <- scale(responseDataTest_processed)
pcrScaled$customTrain(featureDataTrain_scaled[,1:500], responseDataTrain_scaled, tuneGrid=expand.grid(.ncomp = seq(1,100,1)), trControl = myTrControl)
pred <- predictiveModel_myPcr$customPredict(featureDataTest_scaled[,1:500])
obs  <- responseDataTest_scaled
plot(pred,obs)
cor(pred,obs)
cor(pred,obs) ^2
pcrScaled$finalModel
pcrScaled$.self$model
pcrUnscaled$customTrain(featureDataTrain_processed[,1:500], responseDataTrain_processed, tuneGrid=expand.grid(.ncomp = seq(1,100,1)), trControl = myTrControl)
model_myPcr1 <- predictiveModel_myPcr1$rawCaretModel()
pred<-predictiveModel_myPcr1$customPredict(featureDataTest_processed[,1:500])
plot(predictiveModel_myPcr1$customPredict(featureDataTest_processed[,1:500]),responseDataTest_processed)
pcrUnscaled$customTrain(featureDataTrain_processed[,1:500], responseDataTrain_processed, tuneGrid=expand.grid(.ncomp = seq(1,100,1)), trControl = myTrControl)
pred1 <-pcrUnscaled$customPredict(featureDataTest_processed[,1:500])
obs1  <- responseDataTest_processed
plot(pred1,obs1)
cor(pred1,obs1)
cor(pred,obs)
?cor
?caret
?train
library(predictiveModeling)
library(synapseClient)
synapseLogin("in.sock.jang@sagebase.org")
source("/Volumes/ijang/COMPBIO/trunk/users/jang/predictiveModel_ccle/createCcleTrainValidationData.R")
id_copyLayer <- "48339"
layer_copy <- loadEntity(id_copyLayer)
eSet_copy <- layer_copy$objects$copySet
id_oncomapLayer <- "48341"
layer_oncomap <- loadEntity(id_oncomapLayer)
eSet_oncomap <- layer_oncomap$objects$oncomapSet
id_exprLayer <- "48344"
layer_expr <- loadEntity(id_exprLayer)
eSet_expr <- layer_expr$objects$exprSet
###################################################
### Load Response Data
###################################################
id_drugLayer <- "48359"
layer_drug <- loadEntity(id_drugLayer)
adf_drug <- layer_drug$objects$responseADF
###### how many times to validate implemented model
numVals = 5
adf_drug
ncoladf_drug)
ncol(adf_drug)
kk=1
trValDataSet <- createCcleTrainValidationData(exprData = eSet_expr, copyData = eSet_copy, oncomapData = eSet_oncomap, drugData = adf_drug)
featureDataValidation <- createAggregateFeatureDataSet(list(expr = trValDataSet$testData$exprData, copy = trValDataSet$testData$copyData, mut = trValDataSet$testData$oncomapData))
responseDataValidation <- trValDataSet$testData$drugData
featureDataTrain <- createAggregateFeatureDataSet(list(expr = trValDataSet$trainData$exprData, copy = trValDataSet$trainData$copyData, mut = trValDataSet$trainData$oncomapData))
dataSets_ccle <- createFeatureAndResponseDataList(t(featureDataTrain_filtered),trValDataSet$trainData$drugData)
#########################################################################################################
########  Training and Testing data are scaled(normalized) vs. raw(unnormalized)  #######################
#########################################################################################################
# data preprocessing for preselecting features
filteredDataTrain<-filterPredictiveModelData(dataSets_ccle$featureData,dataSets_ccle$responseData[,kk,drop=FALSE], featureVarianceThreshold = 0.01, corPValThresh = 0.1)
# training data
featureDataTrain_processed <- filteredDataTrain$featureData
responseDataTrain_processed <- filteredDataTrain$responseData
# validating data
featureDataTest_processed <- t(featureDataValidation[colnames(featureDataTrain_processed),])
responseDataTest_processed <- responseDataValidation[,kk][[1]]
## scale this data
featureDataTrain_scaled <- scale(featureDataTrain_processed)
responseDataTrain_scaled <- scale(responseDataTrain_processed)
featureDataTest_scaled <- scale(featureDataTest_processed)
responseDataTest_scaled <- scale(responseDataTest_processed)
# 10 fold cross validation to find optimal number of principal components
myTrControl=trainControl(method = "cv", number = 5, returnResamp = "all", verboseIter = TRUE)
numVals = 5
######### store all competition data in Synapse ####################
project_competition <- Project(list(name = "CCLE predictiveModeling Comparison data", description = "This project contains all data with 5 randomly chosen"))
project_competition <- createEntity(project_competition)
dataset_ccle <- Dataset(list(name = "CCLE dataset with train and validate", parentId = propertyValue(project_competition, "id")))
dataset_ccle <- createEntity(dataset_ccle)
for(k in 1:numVals){
trValDataSet <- createCcleTrainValidationData(exprData = eSet_expr, copyData = eSet_copy, oncomapData = eSet_oncomap, drugData = adf_drug)
data <- Layer(list(name = paste("CCLE dataset_0",k,sep = ""), type = "E", parentId = propertyValue(dataset_ccle, "id")))
data <- addObject(data, trValDataSet)
data <- storeEntity(data)
}
id_copyLayer <- "158966"
layer_copy <- loadEntity(id_copyLayer)
layer_copy
list(layer_copy$objects$trainData)
names(layer_copy$objects$trainData)
layer <- loadEntity(id_Layer)
id_Layer <- "158966"
layer <- loadEntity(id_Layer)
layer$objects$trainData$exprData
dim(layer$objects$trainData$exprData)
featureDataTrain <- createAggregateFeatureDataSet(list(expr = layer$objects$trainData$exprData,
copy = layer$objects$trainData$copyData,
mut = layer$objects$trainData$oncomapData))
responseDataTrain <- layer$objects$trainData$drugData
featureDataValidation <- createAggregateFeatureDataSet(list(expr = layer$objects$testData$exprData,
copy = layer$objects$testData$copyData,
mut = layer$objects$testData$oncomapData))
responseDataValidation <- layer$objects$testData$drugData
dataSets_ccle <- createFeatureAndResponseDataList(t(featureDataTrain),responseDataTrain)
dim(dataSets_ccle$featureData)
dim(dataSets_ccle$responseData)
kk=1
filteredDataTrain<-filterPredictiveModelData(dataSets_ccle$featureData,dataSets_ccle$responseData[,kk,drop=FALSE], featureVarianceThreshold = 0.01, corPValThresh = 0.1)
filteredFeatureDataTrain  <- filteredDataTrain$featureData
filteredResponseDataTrain <- filteredDataTrain$responseData
filteredFeatureDataValidation <- t(featureDataValidation[colnames(filteredFeatureDataTrain),])
filteredResponseDataValidation <- responseDataValidation[,kk][[1]]
filteredFeatureDataTrain_scaled <- scale(filteredFeatureDataTrain)
filteredResponseDataTrain_scaled <- scale(filteredResponseDataTrain)
filteredFeatureDataValidation_scaled <- scale(filteredFeatureDataTrain)
filteredResponseDataValidation_scaled <- scale(filteredResponseDataTrain)
filteredFeatureDataValidation_scaled <- scale(filteredFeatureDataValidation)
filteredResponseDataValidation_scaled <- scale(filteredResponseDataValidation)
source('/Volumes/ijang/COMPBIO/trunk/users/jang/R5/myBlassoModel.R')
cvResults_myBlasso <- crossValidatePredictiveModel(filteredFeatureDataTrain, filteredResponseDataTrain, model=myBlassoModel$new(), mcmcNum =5, burnIn = 1, numFolds=5)
dim(filteredFeatureDataTrain)
source('/Volumes/ijang/COMPBIO/trunk/users/jang/R5/myBlassoModel.R')
cvResults_myBlasso <- crossValidatePredictiveModel(filteredFeatureDataTrain, filteredResponseDataTrain, model=myBlassoModel$new(), mcmcNum =5, burnIn = 1, numFolds=5)
cvResults_myBlasso <- crossValidatePredictiveModel(filteredFeatureDataTrain, filteredResponseDataTrain, model=myBlassoModel, mcmcNum =5, burnIn = 1, numFolds=5)
predictiveModel_myBlasso <- myBlassoModel$new()
predictiveModel_myBlasso$customTrain(filteredFeatureDataTrain, filteredResponseDataTrain,mcmcNum = 5, burnIn = 1)
source('/Volumes/ijang/COMPBIO/trunk/users/jang/R5/myBlassoModel.R')
predictiveModel_myBlasso <- myBlassoModel$new()
predictiveModel_myBlasso$customTrain(filteredFeatureDataTrain, filteredResponseDataTrain,mcmcNum = 5, burnIn = 1)
source('/Volumes/ijang/COMPBIO/trunk/users/jang/R5/myBlassoModel.R')
predictiveModel_myBlasso <- myBlassoModel$new()
predictiveModel_myBlasso$customTrain(filteredFeatureDataTrain, filteredResponseDataTrain,mcmcNum = 5, burnIn = 1)
source('/Volumes/ijang/COMPBIO/trunk/users/jang/R5/myBlassoModel.R')
predictiveModel_myBlasso <- myBlassoModel$new()
predictiveModel_myBlasso$customTrain(filteredFeatureDataTrain, filteredResponseDataTrain,mcmcNum = 5, burnIn = 1)
library(monosvm)
library(monosvn)
library(monomvn)
require(monomvn)
source('~/.active-rstudio-document')
predictiveModel_myBlasso <- myBlassoModel$new()
predictiveModel_myBlasso$customTrain(filteredFeatureDataTrain, filteredResponseDataTrain,mcmcNum = 5, burnIn = 1)
predictiveModel_myBlasso
fold = createFolds(filteredFeatureDataTrain[,1],k=5)
?blasso
lambda<-createENetTuneGrid(alphas=1)
predictiveModel_myBlasso$customTrain(filteredFeatureDataTrain, filteredResponseDataTrain,mcmcNum = 5, burnIn = 1,lambda2 = lambda)
fit<-blasso(filteredFeatureDataTrain[-fold[[1]],],filteredResponseDataTrain[-fold[[1]]],mcmcNum =5,burnIn =1,lambda2)
fit<-blasso(filteredFeatureDataTrain[-fold[[1]],],filteredResponseDataTrain[-fold[[1]]], T=5,lambda2=lambda)
lambda
fit<-blasso(filteredFeatureDataTrain[-fold[[1]],],filteredResponseDataTrain[-fold[[1]]], T=5,lambda2=lambda[,2])
fit<-blasso(filteredFeatureDataTrain[-fold[[1]],],filteredResponseDataTrain[-fold[[1]]], T=5,lambda2=lambda[1,2])
class(fit)
fit$lambda2
fit$call
fit<-blasso(filteredFeatureDataTrain[-fold[[1]],],filteredResponseDataTrain[-fold[[1]]], T=50,lambda2=lambda[1,2])
plot(fit$lambda2)
plot(fit)
fit
summary(fit)
fit$beta
dim(fit$beta)
dim(filteredFeatureDataTrain)
fit$mu
fit$mu[49]+fit$beta[49,] %*%filteredFeatureDataTrain
fit$mu[49]+fit$beta[49,] %*%filteredFeatureDataTrain[-fold[[1]],]
dim(filteredFeatureDataTrain[-fold[[1]],])
filteredFeatureDataTrain[-fold[[1]],] %*% fit$beta[49,]
filteredFeatureDataTrain[-fold[[1]],] %*% fit$beta[49,] + fit$mu[49]
cor(filteredFeatureDataTrain[-fold[[1]],] %*% fit$beta[49,] + fit$mu[49],filteredResponseDataTrain[-fold[[1]]])
plot(filteredFeatureDataTrain[-fold[[1]],] %*% fit$beta[49,] + fit$mu[49],filteredResponseDataTrain[-fold[[1]]])
plot(filteredFeatureDataTrain[-fold[[1]],] %*% fit$beta[50,] + fit$mu[50],filteredResponseDataTrain[-fold[[1]]])
cor(filteredFeatureDataTrain[-fold[[1]],] %*% fit$beta[50,] + fit$mu[50],filteredResponseDataTrain[-fold[[1]]])
cor(filteredFeatureDataTrain[-fold[[1]],] %*% fit$beta[48,] + fit$mu[48],filteredResponseDataTrain[-fold[[1]]])
cor(filteredFeatureDataTrain[-fold[[1]],] %*% fit$beta[47,] + fit$mu[47],filteredResponseDataTrain[-fold[[1]]])
cor(filteredFeatureDataTrain[-fold[[1]],] %*% fit$beta[46,] + fit$mu[46],filteredResponseDataTrain[-fold[[1]]])
# Be careful : Bayesia Lasso/Ridge need not crossvalidation.
# CVs are needed to decide optimal parameters.
library(predictiveModeling)
library(synapseClient)
library(monomvn)
source("/home/ijang/COMPBIO/trunk/users/jang/R5/myBridgeModel.R")
synapseLogin("in.sock.jang@sagebase.org")
q()
library(synapseClient)
source("/Volumes/ijang/COMPBIO/trunk/users/jang/survival_analysis/parallelModel/round5/M/metabricENetCoxModelIQMRank_CNV.R")
Model<-loadEntity(170048)
synapseLogin("in.sock.jang@sagebase.org","tjsDUD@")
Model<-loadEntity(170048)
Model$objects$trainedModel
load("Downloads/cvDrug_1.Rdata")
ls()
resultsRank
load("Downloads/lassocvDrug_1.Rdata")
load("Downloads/lasso_cvDrug_1.Rdata")
ls()
resultsRank
setwd("/Volumes/ijang/COMPBIO/trunk/users/jang/drugResponse/Sanger/")
A<-loadEntity(170048)
library(predictiveModeling)
library(synapseClient)
synapseLogin("in.sock.jang@sagebase.org","tjsDUD@")
source("/Volumes/ijang/COMPBIO/trunk/users/jang/R5/myEnetCoxModelIQM.R")
A<-loadEntity(170048)
A
B<-A$objects$trainedModel
B
source("/Volumes/ijang/COMPBIO/trunk/users/jang/survival_analysis/parallelModel/round5/M/metabricENetCoxModelIQMRank_CNV.R")
B<-A$objects$trainedModel
B
B$childclass
library(class)
library(e1071)
library(synapseClient)
synapseLogin("in.sock.jang@sagebase.org","tjsDUD@")
id_copyLayer <- "210937"
layer_copy <- loadEntity(id_copyLayer)
eSet_copy <- layer_copy$objects$eSet_copy
id_oncomapLayer <- "266141"
layer_oncomap <- loadEntity(id_oncomapLayer)
eSet_oncomap <- layer_oncomap$objects$eSet_oncomap
id_exprLayer <- "210931"
layer_expr <- loadEntity(id_exprLayer)
eSet_expr <- layer_expr$objects$eSet_expr
id_drugLayer <- "220680"
layer_drug <- loadEntity(id_drugLayer)
adf_drug <- layer_drug$objects$adf_drug
library(predictiveModeling)
featureData <- createAggregateFeatureDataSet(list(expr = eSet_expr, copy = eSet_copy, mut = eSet_oncomap))
# NA filter for training set
featureData_filtered <- filterNasFromMatrix(featureData, filterBy = "rows")
dataSets_ccle <- createFeatureAndResponseDataList(t(featureData_filtered),adf_drug)
dim(dataSets_ccle$featureData)
dim(dataSets_ccle$responseData)
filteredData<-filterPredictiveModelData(dataSets_ccle$featureData,dataSets_ccle$responseData[,1,drop=FALSE], featureVarianceThreshold = 0.01, corPValThresh = 0.1)
filteredFeatureData  <- filteredData$featureData
filteredFeatureData  <- t(unique(t(filteredFeatureData)))
filteredResponseData <- filteredData$responseData
## scale these data
filteredFeatureDataScaled <- scale(filteredFeatureData)
filteredResponseDataScaled <- scale(filteredResponseData)
hist(filteredResponseDataScaled)
mean(filteredResponseDataScaled)
std(filteredResponseDataScaled)
sd(filteredResponseDataScaled)
st(filteredResponseDataScaled)
var(filteredResponseDataScaled)
seq(min(filteredResponseDataScaled),max(filteredResponseDataScaled),len =30)
k=10
response <- as.factor(filteredResponseDataScaled<=threshold[k])
feature <-as.data.frame(filteredFeatureDataScaled)
classifier<-naiveBayes(feature, response)
table(predict(classifier, feature), response)
threshold<-seq(min(filteredResponseDataScaled),max(filteredResponseDataScaled),len =30)
response <- as.factor(filteredResponseDataScaled<=threshold[k])
feature <-as.data.frame(filteredFeatureDataScaled)
classifier<-naiveBayes(feature, response)
table(predict(classifier, feature), response)
min(filteredResponseDataScaled)
threshold
threshold<-seq(min(filteredResponseDataScaled),max(filteredResponseDataScaled),len =32)
threshold<-seq(min(filteredResponseDataScaled),max(filteredResponseDataScaled),len =32)
k=1
response <- as.factor(filteredResponseDataScaled<=threshold[k+1])
feature <-as.data.frame(filteredFeatureDataScaled)
classifier<-naiveBayes(feature, response)
table(predict(classifier, feature), response)
library(synapseClient)
synapseLogin("in.sock.jang@sagebase.org","tjsDUD@")
synapseLogin("in.sock.jang@sagebase.org","tjsDUD@")
id_copyLayer <- "210937"
layer_copy <- loadEntity(id_copyLayer)
response <- as.factor(filteredResponseDataScaled<=threshold[k+1])
ls()
library(ROCR)
data(ROCR.simple)
pred <- prediction(ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
perf
table(predict(classifier, iris[,-5]), iris[,5])
perf@x.values
perf@x.values[[1]]
scatter(perf@x.values[[1]],perf@y.values[[1]])
plot(perf@x.values[[1]],perf@y.values[[1]])
plot(perf@x.values[[1]],perf@y.values[[1]],type = "l")
table(predict(classifier, feature), response)
table(predict(classifier, iris[,-5]), iris[,5])
classifier<-naiveBayes(iris[,1:4], iris[,5])
dim(adf_drug)
ls()
ROCR.simple
drugName
ls()
source('http://sage.fhcrc.org/CRAN.R')
pkgInstall(c("synapseClient"))
library(synapseClient)
sessionInfo()
library(synapseClient)
library(predictiveModeling)
library(synapseClient)
synapseLogin("in.sock.jang@sagebase.org","tjsDUD@")
source("~/COMPBIO/trunk/users/jang/R5/bootstrapPredictiveModel.R")
source("~/COMPBIO/trunk/users/jang/R5/myEnetModel.R")
sessionInfo()
library(synapseClient)
unloadNamespace('synapseClient')
library('synapseClient')
sessionInfo()
library(synapseClient)
library(predictiveModeling)
library(synapseClient)
synapseLogin("in.sock.jang@sagebase.org","tjsDUD@")
source("~/COMPBIO/trunk/users/jang/R5/bootstrapPredictiveModel.R")
source("~/COMPBIO/trunk/users/jang/R5/myEnetModel.R")
id_oncomapLayer <- "266141"
layer_oncomap <- loadEntity(id_oncomapLayer)
eSet_oncomap <- layer_oncomap$objects$eSet_oncomap
library(predictiveModeling)
library(synapseClient)
synapseLogin("in.sock.jang@sagebase.org","tjsDUD@")
id_oncomapLayer <- "266141"
layer_oncomap <- loadEntity(id_oncomapLayer)
q()
library(predictiveModeling)
library(synapseClient)
synapseLogin("in.sock.jang@sagebase.org","tjsDUD@")
id_oncomapLayer <- "266141"
layer_oncomap <- loadEntity(id_oncomapLayer)
id_oncomapLayer <- "syn266141"
layer_oncomap <- loadEntity(id_oncomapLayer)
id_oncomapLayer <- "syn266141"
layer_oncomap <- loadEntity(id_oncomapLayer)
q()
sessionInfo()
library(predictiveModeling)
library(synapseClient)
getwd()
library(synapseClient)
sessionInfo()
library(synapseClient)
synapseLogin("in.sock.jang@sagebase.org","tjsDUD@")
id_oncomapLayer <- "syn266141"
layer_oncomap <- loadEntity(id_oncomapLayer)
eSet_oncomap <- layer_oncomap$objects$eSet_oncomap
ls()
library(synapseClient)
library(GSA)
install.packages("GSA")
library(GSA)
library(affy)
synapseLogin("in.sock.jang@sagebase.org","tjsDUD@")
ALL <- GSA.read.gmt("/Users/insockjang/Documents/Sage_Challenge/MSigDB/msigdb.v3.0.orig.gmt")
C1.POS <- GSA.read.gmt("/Users/insockjang/Documents/Sage_Challenge/MSigDB/C1/c1.all.v3.0.orig.gmt")
C2.CGP <- GSA.read.gmt("/Users/insockjang/Documents/Sage_Challenge/MSigDB/C2/Chemical_Genetic_Perturbation/c2.cgp.v3.0.orig.gmt")
C2.BIOCARTA <- GSA.read.gmt("/Users/insockjang/Documents/Sage_Challenge/MSigDB/C2/Cannonical_Pathway/BIOCARTA/c2.cp.biocarta.v3.0.orig.gmt")
C2.KEGG <- GSA.read.gmt("/Users/insockjang/Documents/Sage_Challenge/MSigDB/C2/Cannonical_Pathway/KEGG/c2.cp.kegg.v3.0.orig.gmt")
C2.REACTOME <- GSA.read.gmt("/Users/insockjang/Documents/Sage_Challenge/MSigDB/C2/Cannonical_Pathway/REACTOME/c2.cp.reactome.v3.0.orig.gmt")
C3.miRT <-GSA.read.gmt("/Users/insockjang/Documents/Sage_Challenge/MSigDB/C3/miR_target/c3.mir.v3.0.orig.gmt")
C3.TFT <-GSA.read.gmt("/Users/insockjang/Documents/Sage_Challenge/MSigDB/C3/TF_target/c3.tft.v3.0.orig.gmt")
C4.CGN <-GSA.read.gmt("/Users/insockjang/Documents/Sage_Challenge/MSigDB/C4/CancerGene_Neighbor/c4.cgn.v3.0.orig.gmt")
C4.CGM <-GSA.read.gmt("/Users/insockjang/Documents/Sage_Challenge/MSigDB/C4/CancerGene_Module/c4.cm.v3.0.orig.gmt")
C5.GO_BP <-GSA.read.gmt("/Users/insockjang/Documents/Sage_Challenge/MSigDB/C5/GO_BP/c5.bp.v3.0.orig(1).gmt")
C5.GO_CC <-GSA.read.gmt("/Users/insockjang/Documents/Sage_Challenge/MSigDB/C5/GO_CC/c5.cc.v3.0.orig.gmt")
C5.GO_MF <-GSA.read.gmt("/Users/insockjang/Documents/Sage_Challenge/MSigDB/C5/GO_MF/c5.mf.v3.0.orig.gmt")
ALL
length(ALL)
ALL[[1]]
length(ALL[[1]])
ALL[[1]][[1]]
ALL[[1]][[2]]
ALL[[1]][[3]]
length(C2.KEGG)
C2.KEGG[[1]]
C2.KEGG[[2]]
C2.KEGG[[3]]
C2.KEGG$geneset.names
MsigDB_symbolID <- GSA.read.gmt("msigdb.v3.0.symbols.gmt")
MsigDB_symbolID <- GSA.read.gmt("/Users/insockjang/Documents/Sage_Challenge/MSigDB/msigdb.v3.0.symbols.gmt")
length(MsigDB_symbolID)
length(MsigDB_symbolID$geneset.names)
MsigDB_symbolID$geneset.names[[1]]
MsigDB_symbolID$geneset.names[[2]]
length(MsigDB_symbolID$genesets)
MsigDB_symbolID$genesets[[1]]
a<-MsigDB_symbolID$genesets[[1]]
b<-strsplit(a,"///")
b
b<-strsplit(a,"[///]")
b
aa<-gsub([ ],a)
aa<-gsub([" "],a)
aa<-gsub([" "],"",a)
aa<-gsub(" ","",a)
aa
b<-strsplit(gsub(" ","",a),"///")
b
b[[22]]
union(b[[22]])
union(cc,b[[22]])
cc<-c()
union(cc,b[[22]])
for(k in 1:length(MsigDB_symbolID$genesets)){
a<-MsigDB_symbolID$genesets[[k]]
b<-strsplit(gsub(" ","",a),"///")
cc<-c()
for(k1 in 1:length(b)){
cc<-union(cc,b[[k1]])
}
MsigDB_symbolID$genesets[[k]]<-cc
}
MsigDB_symbolID$genesets[[1]]
MsigDB_symbolID$genesets[[2]]
MsigDB_symbolID$genesets[[3]]
MsigDB_symbolID$genesets[[4]]
MsigDB_symbolID$genesets[[5]]
MsigDB_symbolID$genesets[[6]]
K<-MsigDB_symbolID
testFiles <- "/Users/insockjang/Documents/Sage_Challenge/MSigDB/MsigDB_symbolID.ROBJECT"
load(testFiles)
ls()
MsigDB_symbolID
K
MsigDB_symbolID<-K
MsigDB_symbolID
MsigDB_symbolID[[1]]
MsigDB_symbolID
symbolIDLayer <- Layer(list(name = "MsigDB_symbolID_new", type = "E", parentId = "105191", status="db"))
library(predictiveModeling)
library(predictiveModeling)
q()
getwd()
setwd("/Volumes/ijang/COMPBIO/trunk/users/jang/drugResponse/CCLE/")
load("naiveBayes/ROC_1.Rdata")
plot(NBList[[1]][,c(2,1)])
abline(0,1)
load("randomForest/ROC_1.Rdata")
points(RFList[,c(2,1)],col="red")
?randomForest
library(randomForest)
ls()
id_drugLayer <- "220680"
layer_drug <- loadEntity(id_drugLayer)
adf_drug <- layer_drug$objects$adf_drug
library(synapseClient)
synapseLogin("in.sock.jang@sagebase.org","tjsDUD@")
id_drugLayer <- "220680"
layer_drug <- loadEntity(id_drugLayer)
adf_drug <- layer_drug$objects$adf_drug
pData(adf_drug)
library(affy)
pData(adf_drug)
hist(pData(adf_drug)[1,])
hist(pData(adf_drug)[2,])
hist(pData(adf_drug)[3,])
hist(pData(adf_drug)[4,])
(pData(adf_drug)[4,])
(pData(adf_drug)[4,,drop = TRUE])
hist(pData(adf_drug)[4,,drop = TRUE])
?hist
MAT <- pData(adf_drug)
dim(MAT)
hist(MAT[,1])
hist(MAT[,2])
hist(MAT[,3])
hist(MAT[,4])
?hist
hist(MAT[,5])
hist(MAT[,6])
hist(MAT[,7])
hist(MAT[,8])
hist(MAT[,9])
hist(MAT[,10])
